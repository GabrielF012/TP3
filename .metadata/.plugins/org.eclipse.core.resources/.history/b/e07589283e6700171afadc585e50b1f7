/**
* \file DicoSynonymes.cpp
* \brief Le code des opérateurs du DicoSynonymes.
* \author ?
* \version 0.5
* \date ?
*
* Travail pratique numéro 3.
*
*/

#include "DicoSynonymes.h"
#include "AssertionException.h"

namespace TP3
{

	// Méthode fournie que vous pouvez modifier si vous voulez
	void DicoSynonymes::chargerDicoSynonyme(std::ifstream& fichier)
	{
		ASSERTION(fichier.is_open());

		std::string ligne;
		std::string buffer;
		std::string radical;
		int cat = 1;

		while (std::getline(fichier, ligne)) // tant qu'on peut lire dans le fichier
		{

			if (ligne == "$")
			{
				cat = 3;
				std::getline(fichier, ligne);
			}
			if (cat == 1)
			{
				radical = ligne;
				ajouterRadical(radical);
				cat = 2;
			}
			else if (cat == 2)
			{
				std::stringstream ss(ligne);
				while (ss >> buffer)
					ajouterFlexion(radical, buffer);
				cat = 1;
			}
			else
			{
				std::stringstream ss(ligne);
				ss >> radical;
				ss >> buffer;
				int position = -1;
				ajouterSynonyme(radical, buffer, position);
				while (ss >> buffer)
					ajouterSynonyme(radical, buffer, position);
			}
		}
	}

	//Mettez l'implantation des autres méthodes demandées ici.

	DicoSynonymes::DicoSynonymes():
				nbRadicaux(0){

	}

	DicoSynonymes::DicoSynonymes(std::ifstream& fichier) {
		chargerDicoSynonyme(fichier);
	}

	DicoSynonymes::~DicoSynonymes() {
	}

	void DicoSynonymes::ajouterRadical(const std::string& motRadical) {
		_ajouterRadical(racine, motRadical);
	}

	void DicoSynonymes::ajouterFlexion(const std::string& motRadical,
			const std::string& motFlexion) {
	}

	void DicoSynonymes::ajouterSynonyme(const std::string& motRadical,
			const std::string& motSynonyme, int& numGroupe) {
	}

	void DicoSynonymes::supprimerRadical(const std::string& motRadical) {
	}

	void DicoSynonymes::supprimerFlexion(const std::string& motRadical,
			const std::string& motFlexion) {
	}

	void DicoSynonymes::supprimerSynonyme(const std::string& motRadical,
			const std::string& motSynonyme, int& numGroupe) {
	}

	bool DicoSynonymes::estVide() const {
		return nbRadicaux == 0;
	}

	int DicoSynonymes::nombreRadicaux() const {
		return nbRadicaux;
	}

	std::string DicoSynonymes::rechercherRadical(const std::string& mot) const {
	}

	float DicoSynonymes::similitude(const std::string& mot1,
			const std::string& mot2) const {
	}

	int DicoSynonymes::getNombreSens(std::string radical) const {
	}

	std::string DicoSynonymes::getSens(std::string radical, int position) const {
	}

	std::vector<std::string> DicoSynonymes::getSynonymes(std::string radical,
			int position) const {
	}

	std::vector<std::string> DicoSynonymes::getFlexions(std::string radical) const {
	}

	void DicoSynonymes::_ajouterRadical(NoeudDicoSynonymes *& noeud,
			const std::string& motRadical) {
		if (noeud == nullptr){
			noeud = new NoeudDicoSynonymes(motRadical);
		}else if (noeud->gauche->radical < motRadical){
			_ajouterRadical(noeud->gauche, motRadical);
		}else {
			_ajouterRadical(noeud->droit, motRadical);
		}

		_miseAJourHauteurNoeud(noeud);
		_balancerUnNoeud(noeud);

	}

	void DicoSynonymes::_miseAJourHauteurNoeud(NoeudDicoSynonymes *& noeud){
		if(noeud != nullptr){
			noeud->hauteur = 1 + std::max(_hauteur(noeud->gauche), _hauteur(noeud->droit));
		}
	}

	int DicoSynonymes::_hauteur(NoeudDicoSynonymes *& noeud){
			if (noeud == nullptr){
				return -1;
			}
			return noeud->hauteur;
		}

	void DicoSynonymes::_balancerUnNoeud(NoeudDicoSynonymes *& noeud){
		if (noeud == nullptr){
			return;
		}
		if (_debalancementAGauche(noeud)){
			if (_sousArbrePencheADroite(noeud->gauche)){
				_zigZagGauche(noeud);
			} else {
				_zigZigGauche(noeud);
			}
		}else if (_debalancementADroite(noeud)){
			if (_sousArbrePencheAGauche(noeud->droit)){
				_zigZagDroite(noeud);
			} else {
				_zigZigDroite(noeud);
			}
		}
	}

	bool DicoSynonymes::_debalancementAGauche(NoeudDicoSynonymes*& noeud) const {
		if (noeud == nullptr){
			return false;
		}
		return _hauteur(noeud->gauche) - _hauteur(noeud->droit) >= 2;
	}

	bool DicoSynonymes::_debalancementADroite(NoeudDicoSynonymes*& noeud) const {
	}

	bool DicoSynonymes::_sousArbrePencheAGauche(NoeudDicoSynonymes*& noeud) const {
	}

	bool DicoSynonymes::_sousArbrePencheADroite(NoeudDicoSynonymes*& noeud) const {
	}

	void DicoSynonymes::_zigZigGauche(NoeudDicoSynonymes*& noeudCritique) {
	}

	void DicoSynonymes::_zigZigDroite(NoeudDicoSynonymes*& noeudCritique) {
	}

	void DicoSynonymes::_zigZagGauche(NoeudDicoSynonymes*& noeud) {
	}

	void DicoSynonymes::_zigZagDroite(NoeudDicoSynonymes*& noeud) {
	}


} //Fin du namespace

